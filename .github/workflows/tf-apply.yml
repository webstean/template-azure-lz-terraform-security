name: 'Terraform - Plan/Apply'
#description: Run Terraform Plan and if successful, run Terraform Apply
#branding:
#  icon: filter
#  color: purple

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

on:
  push:
    branches:
    - main
    paths:
      - 'src/terraform/**'
      - '.github/workflows/**'
  pull_request:
    branches:
    - main
    paths:
      - 'src/terraform/**'
      - '.github/workflows/**'

##Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

#These environment variables are used by the terraform azure provider to setup OIDC authenticate. 
env:
  WORKING_DIRECTORY: "./src/terraform"
  ## WORKING_DIRECTORY: "${{ vars.TERRAFORM_WORKING_DIRECTORY }}"
  APPLICATION_NAME: "aztftest"
  ENVIRONMENT_NAME: "production"    
  ## ENVIRONMENT_NAME: "staging"    
  ## ENVIRONMENT_NAME: "development"    
  ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
  
jobs:
  terraform-plan:
    name: 'Terraform Plan'
    strategy:
      matrix:
        ## runs-on: [ubuntu-latest, macos-latest, windows-latest]
        runs-on: [ubuntu-latest]
    runs-on: ${{ matrix.runs-on }}
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      ## Greetings
      - name: Greetings
        run: echo "Running as ${GITHUB_ACTOR} for ${GITHUB_REPOSITORY} on ${RUNNER_OS}!"
      ## Harden runner
      - name: Harden Runner
        uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
        with:
          egress-policy: audit

      ## Check if runner is Linux, exit if it isn't
      - name: Check Runner is Linux
        if: runner.os != 'Linux'
        run: |
          echo "The operating system on the runner is not Linux, it's $RUNNER_OS."
          exit 1
        continue-on-error: false

      ## Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      ## Install and setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      ## Show Terraform version
      - name: Show Terraform Version
        run: terraform -chdir=$WORKING_DIRECTORY version
  
      ## Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      ##- name: Terraform Test
      ##  run: terraform -chdir=$WORKING_DIRECTORY test 

      ## Fix format of Terraform configuration files to adhere to a canonical format
      - name: Terraform Format
        run: terraform -chdir=$WORKING_DIRECTORY fmt -check
        continue-on-error: true
    
      ## Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      ## variables: TFSTATE_RESOURCE_GROUP_NAME, TFSTATE_STORAGE_ACCOUNT_NAME, TFSTATE_CONTAINER_NAME
      - name: Terraform Init
        run: terraform -chdir=$WORKING_DIRECTORY init 
##        run: |
##           terraform init \
##          -backend-config="resource_group_name=$TFSTATE_RESOURCE_GROUP_NAME" \
##          -backend-config="storage_account_name=$TFSTATE_STORAGE_ACCOUNT_NAME" \
##          -backend-config="container_name=$TFSTATE_STORAGE_CONTAINER_NAME" \
##          -backend-config="key=$TFSTATE_KEY_NAME"
      ## subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ## tenant_id: ${{ secrets.ARM_TENANT_ID }}
      ## client_id: ${{ secrets.ARM_CLIENT_ID }}
      ## client_secret: ${{ secrets.ARM_CLIENT_SECRET }}

      ## Show directory structure
      - name: Show Directory
        run: pwd && ls -al
    
      ## Will fail the build if falses
      - name: Terraform Validate
        run: terraform -chdir=$WORKING_DIRECTORY validate
  
      ## Generates an execution plan for Terraform
      ## An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          terraform -chdir=$WORKING_DIRECTORY plan -detailed-exitcode -no-color -out tfplan-${{ matrix.runs-on }} || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi
        
      ## Save plan to artifacts  
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ matrix.runs-on }}
          path: ${{ env.WORKING_DIRECTORY }}/tfplan-${{ matrix.runs-on }}
        
      ## Create string output of Terraform Plan
      - name: Create String Output of Terraform Plan
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform -chdir=$WORKING_DIRECTORY show -no-color tfplan-${{ matrix.runs-on }})
        
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output  :rocket: :muscle: :eyes: :astronaut:" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
        
      ## Publish Terraform Plan as task summary 
      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        ## in case argument list is too long, we continue
        continue-on-error: true
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
      ## If this is a PR post the changes
      - name: Push Terraform Output to GitHub PR
        if: github.ref != 'refs/heads/main'
        uses: actions/github-script@v6
        env:
          SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })
                
  terraform-apply:
    name: 'Terraform Apply'
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    strategy:
      matrix:
        ## runs-on: [ubuntu-latest, macos-latest, windows-latest]
        runs-on: [ubuntu-latest]
    runs-on: ${{ matrix.runs-on }}
    ## environment: ${{ env.ENVIRONMENT_NAME }}
    needs: [terraform-plan]
    
    steps:
#    ## Harden runner
#    - name: 'Harden Runner'
#      uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
#      with:
#        egress-policy: audit

    ## Checkout the repository to the GitHub Actions runner
    - name: 'Checkout'
      uses: actions/checkout@v4

    ## Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: 'Setup Terraform'
      uses: hashicorp/setup-terraform@v3

    ## Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: 'Terraform Init'
      run: terraform -chdir=${{ env.WORKING_DIRECTORY }} init

    ## Download saved plan from artifacts  
    - name: 'Download Terraform Plan'
      uses: actions/download-artifact@v4
      with:
        name: tfplan-${{ matrix.runs-on }}
        path: ${{ env.WORKING_DIRECTORY }}/tfplan-${{ matrix.runs-on }}

    ## Terraform Apply
    - name: 'Terraform Apply'
      run: |
        export exitcode=0
        terraform -chdir=$WORKING_DIRECTORY apply -auto-approve tfplan-${{ matrix.runs-on }}/tfplan-${{ matrix.runs-on }}
